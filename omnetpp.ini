[General]
#debug-on-errors = true
#record-eventlog = true
#eventlog-message-detail-pattern = Packet:declaredOn(Packet) or bitLength
#eventlog-message-detail-pattern = *

#**.appType = "App"
#**.app.packetLength = 4096 bytes

#[Net60CutThrough]
#network = networks.Net60
#description = "60 node network with cut-through switching"
#**.app.packetLength = 32768 bytes
#**.useCutThroughSwitching = true  # let packets flow through the routers
#**.destAddresses = "1 50"
#**.sendIaTime = uniform(1ms, 5ms)
#
#[Net60StoreAndForward]
#network = networks.Net60
#description = "60 node network with store-and-forward switching"
#**.app.packetLength = 32768 bytes
#**.destAddresses = "1 50"
#**.sendIaTime = uniform(1ms, 5ms)
#
#[Net60Bursty]
#network = networks.Net60
#**.appType = "BurstyApp"  # override "App" in [General]
#**.app.packetLength = intuniform(2048 byte, 16384 byte)
#**.destAddresses = "1 50"
#
#[Net60a]
#network = networks.Net60a
#**.destAddresses = "1 28 50"
#
#[Net5]
#network = networks.Net5
#**.destAddresses = "1 3"
#**.sendIaTime = uniform(500ms, 1500ms)  # high traffic
#
#[Net5SaturatedQueue]  # Note: this config is used by the Python/Pandas tutorial -- do not touch!
#network = networks.Net5
#sim-time-limit = 200s
#**.frameCapacity = 10
#**.destAddresses = "1 4"
#**.sendIaTime = uniform(100ms, 500ms)  # high traffic
#**.app.packetLength = intuniform(50 bytes, 4096 bytes)
#**.channel.*.result-recording-modes = -vector  # turn off vectors from channels
#**.result-recording-modes = all  # turn on recording of optional vectors
#
#[Net10]
#network = networks.Net10
#**.app.packetLength = intuniform(128 byte, 1024 byte)
#**.destAddresses = "1 6 8"
#
#[Net10Experiment]
#network = networks.Net10
#**.destAddresses = "1"
#**.app.sendIaTime = exponential(${iaMean = 170..400 step 10 } ms)
#**.queue[*].useCutThroughSwitching = ${cutThrough = false, true }
#**.queue[*].frameCapacity = 100
#**.vector-recording = false
#sim-time-limit = 1200s
#
#[RandomGraph]
#network = networks.RandomGraph
#**.destAddresses = "0 2"
#
#[Mesh]
#network = networks.Mesh
#**.destAddresses = "0 18 52"
#
#[RandomMesh]
#network = networks.RandomMesh
#**.destAddresses = "0 18 52"

[NetBuilder]
network = networks.BuilderNet
**.builder.nodesFile = "networks/nodes_sample8.csv"
**.builder.connectionsFile = "networks/connections_sample8.csv"
#**.builder.nodesFile = "networks/physicalTopo/pathGraph/g0/vidlist_pathGraph_500_consec.csv"
#**.builder.connectionsFile = "networks/physicalTopo/pathGraph/g0/PGedgelist_pathGraph_500.csv"

# seed-0-mt = 1

**.node*.address = int(replace(fullName(), "node", ""))

**.node*.routing.typename = "Vrr"

# VRR
**.node*.routing.vsetHalfCardinality = 1
**.node*.routing.sendTestPacket = true
#**.node*.routing.inNetworkEmptyVsetWarmupTime = 1000s

# VLR
# **.node*.routing.vsetHalfCardinality = 1
# **.node*.routing.backupVsetHalfCardinality = 1
# **.node*.routing.pendingVsetHalfCardinality = 4

# #**.node*.routing.representativeVid = 0
# #**.node*.routing.repPosNodeIdCSVFile = "networks/repPosNodeId_sample8.csv"
# #**.node*.routing.repPosNodeIdChoice = "nodeAtCorner, 0"

# #**.node*.routing.testDstAssignmentFile = "networks/testDst.csv"
# **.node*.routing.sendTestPacket = true
# **.node*.routing.sendPeriodicNotifyVset = true

# # simulate node/link failure
# **.node*.routing.repairLinkReqFloodTTL = 5
# **.node*.routing.routePrevhopVidsSize = 3

# **.node*.routing.setupTempRoute = false
# **.node*.routing.keepDismantledRoute = true
# **.node*.routing.sendRepairLocalNoTemp = false


**.node*.routing.routingTableVidCSVFile = "${resultdir}/routingTableInVid.csv"
**.node*.routing.writeRoutingTableToFileTimes = "195"

**.node*.routing.failureSimulationOpTimes = "200, 500"
#**.node*.routing.failureNodeSimulationFile = "networks/failureNode_sample8.csv"
**.node*.routing.failureLinkSimulationFile = "networks/failureLink_sample8.csv"
**.node*.routing.failureRingPartitionFile = "networks/failurePartition_sample8.csv"



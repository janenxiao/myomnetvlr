[General]
#debug-on-errors = true
#record-eventlog = true
#eventlog-message-detail-pattern = Packet:declaredOn(Packet) or bitLength
#eventlog-message-detail-pattern = *

#**.appType = "App"
#**.app.packetLength = 4096 bytes

#[Net60CutThrough]
#network = networks.Net60
#description = "60 node network with cut-through switching"
#**.app.packetLength = 32768 bytes
#**.useCutThroughSwitching = true  # let packets flow through the routers
#**.destAddresses = "1 50"
#**.sendIaTime = uniform(1ms, 5ms)
#
#[Net60StoreAndForward]
#network = networks.Net60
#description = "60 node network with store-and-forward switching"
#**.app.packetLength = 32768 bytes
#**.destAddresses = "1 50"
#**.sendIaTime = uniform(1ms, 5ms)
#
#[Net60Bursty]
#network = networks.Net60
#**.appType = "BurstyApp"  # override "App" in [General]
#**.app.packetLength = intuniform(2048 byte, 16384 byte)
#**.destAddresses = "1 50"
#
#[Net60a]
#network = networks.Net60a
#**.destAddresses = "1 28 50"
#
#[Net5]
#network = networks.Net5
#**.destAddresses = "1 3"
#**.sendIaTime = uniform(500ms, 1500ms)  # high traffic
#
#[Net5SaturatedQueue]  # Note: this config is used by the Python/Pandas tutorial -- do not touch!
#network = networks.Net5
#sim-time-limit = 200s
#**.frameCapacity = 10
#**.destAddresses = "1 4"
#**.sendIaTime = uniform(100ms, 500ms)  # high traffic
#**.app.packetLength = intuniform(50 bytes, 4096 bytes)
#**.channel.*.result-recording-modes = -vector  # turn off vectors from channels
#**.result-recording-modes = all  # turn on recording of optional vectors
#
#[Net10]
#network = networks.Net10
#**.app.packetLength = intuniform(128 byte, 1024 byte)
#**.destAddresses = "1 6 8"
#
#[Net10Experiment]
#network = networks.Net10
#**.destAddresses = "1"
#**.app.sendIaTime = exponential(${iaMean = 170..400 step 10 } ms)
#**.queue[*].useCutThroughSwitching = ${cutThrough = false, true }
#**.queue[*].frameCapacity = 100
#**.vector-recording = false
#sim-time-limit = 1200s
#
#[RandomGraph]
#network = networks.RandomGraph
#**.destAddresses = "0 2"
#
#[Mesh]
#network = networks.Mesh
#**.destAddresses = "0 18 52"
#
#[RandomMesh]
#network = networks.RandomMesh
#**.destAddresses = "0 18 52"

[NetBuilder]
network = networks.BuilderNet
#**.builder.nodesFile = "networks/nodes_squareGrid16.csv"
#**.builder.connectionsFile = "networks/connections_squareGrid16.csv"
#**.builder.nodesFile = "networks/physicalTopo/pathGraph/g0/vidlist_pathGraph_${N=100}_consec.csv"
#**.builder.connectionsFile = "networks/physicalTopo/pathGraph/g0/PGedgelist_pathGraph_${N}.csv"
**.builder.nodesFile = "networks/physicalTopo/${graphtype=squareGrid}/g${graphnum=0}/vidlist_${graphtype}_${N=49, 100, 484, 1024, 5041, 10000}_maxId60000.csv"
**.builder.connectionsFile = "networks/physicalTopo/${graphtype}/g${graphnum}/PGedgelist_${graphtype}_${N}.csv"
#**.builder.nodesFile = "networks/physicalTopo/${graphtype=powerlaw2}/g${graphnum=0}/vidlist_${graphtype}_${N=1000}_maxId60000.csv"
#**.builder.connectionsFile = "networks/physicalTopo/${graphtype}/g${graphnum}/PGedgelist_${graphtype}_${N}.csv"

record-eventlog = false		# turn off recording of simulator events into an event log file (.elog) file
**.scalar-recording = false	# turn off all scalars, no output scalar file (.sca) will be created
**.statistic-recording = false	# whether the matching @statistic should be recorded
**.vector-recording = false		# # turn off all vectors, no output vector file (.vec) will be created

# Configure Logging in Cmdenv
#cmdenv-redirect-output = true
##cmdenv-output-file = "${resultdir}/cmdenvlog_${graphtype}_${N}.out"
cmdenv-express-mode = true
cmdenv-autoflush = false
**.routing.cmdenv-log-level = warn
**.cmdenv-log-level = off		# fatal, error, warn info, detail, debug, trace

#repeat = 3
seed-0-mt = ${repeatnum=0}
##seed-set = ${repetition}	# all $repetition=0 runs will use the same seeds (seed set 0), all $repetition=1 runs use another seed set
sim-time-limit = 1500s

**.node*.address = int(replace(fullName(), "node", ""))

**.node*.routing.typename = "Vlr"

**.node*.routing.simulateBeaconLossRate = 0.01

**.node*.routing.recordReceivedMsgAggPeriod = 1

# VRR
#**.node*.routing.vsetHalfCardinality = 2
##**.node*.routing.inNetworkEmptyVsetWarmupTime = 1000s
#
#**.node*.routing.removeBrokenVrouteEndpointInRepair = false

# VLR
##**.node*.routing.maxJitter = 0.2s # ${0.02s, 0.1s, 0.5s, 1s}
##**.node*.routing.repSeqValidityInterval = ${6s, 12s, 20s, 50s}

**.node*.routing.vsetHalfCardinality = ${vcard=4}
**.node*.routing.backupVsetHalfCardinality = ${backupvcard=0}   # ${backupvcard=3, 2, 1 ! vcard}  # parallel iteration does not define a loop of its own, but rather, the sequence is advanced in lockstep with the variable after the "!". In other words, the "!" syntax chooses the kth value from the iteration
#**.node*.routing.pendingVsetHalfCardinality = 4

**.node*.routing.representativeFixed = false
**.node*.routing.startingRootFixed = false
#**.node*.routing.representativeVid = 0
#**.node*.routing.repPosNodeIdCSVFile = "networks/physicalTopo/${graphtype}/g${graphnum}/repPosNodeId_${graphtype}_${N}.csv"
#**.node*.routing.repPosNodeIdChoice = "nodeAtEdgece, 0"
#**.node*.routing.inNetworkEmptyVsetWarmupTime = 5s
**.node*.routing.repBeaconExcludeOldRepSeqNum = "false"

**.node*.routing.sendPeriodicNotifyVset = false
**.node*.routing.sendNotifyVsetToReplacedVnei = true

# simulate node/link failure
**.node*.routing.repairLinkReqFloodTTL = 5
**.node*.routing.routePrevhopVidsSize = 3

**.node*.routing.setupTempRoute = false
**.node*.routing.keepDismantledRoute = false
**.node*.routing.sendRepairLocalNoTemp = false

#**.node*.routing.routingTableVidCSVFile = "${resultdir}/routingTableInVid.csv"
#**.node*.routing.writeRoutingTableToFileTimes = "195"

# Commented out bc vidRingRegistry and failureSimulationMap are no longer static variables of RoutingBase class 
# NOTE shouldn't iterate different values of failureSimulationOpTimes, failureNodeSimulationFile, failureLinkSimulationFile, failureRingPartitionFile, writeRoutingTableToFileTimes, writeNodeStatsTimes
# 	   because hard to set static variables empty only for the very first node entering initialize()
# NOTE create different omnetpp.ini files when running simulations w/ different parameterw, because par() may read unintended values when omnetpp.ini file is changed during run
#####**.node*.routing.failureSimulationOpTimes = "500, 1000"
######**.node*.routing.failureNodeSimulationFile = "networks/failureNode_squareGrid_repAtCentre_${N}.csv"
#####**.node*.routing.failureNodeSimulationFile = "networks/failureNode_squareGrid16.csv"
#####**.node*.routing.failureLinkSimulationFile = "networks/failureLink_squareGrid16.csv"
#####**.node*.routing.failureRingPartitionFile = "networks/failurePartition_squareGrid16.csv"
#####**.node*.routing.failureLinkSimulationFile = "networks/physicalTopo/${graphtype}/g${graphnum}/failureScenarioFile/partition2/case0/failureLink_${graphtype}_${N}.csv"
#####**.node*.routing.failureRingPartitionFile = "networks/physicalTopo/${graphtype}/g${graphnum}/failureScenarioFile/partition2/case0/failurePartition_${graphtype}_${N}.csv"
#####**.node*.routing.failureNodeSimulationFile = "networks/physicalTopo/${graphtype}/g${graphnum}/failureScenarioFile/nodeFailure15pc/case0/failureNode_${graphtype}_${N}.csv"
#####**.node*.routing.failureRingPartitionFile = "networks/physicalTopo/${graphtype}/g${graphnum}/failureScenarioFile/nodeFailure15pc/case0/failurePartition_${graphtype}_${N}.csv"

**.node*.routing.writeNodeStatsTimes = "498, 998"

**.routingConfigurator.failureSimulationOpTimes = "500, 1000"
**.routingConfigurator.failureNodeSimulationFile = "networks/physicalTopo/${graphtype}/g${graphnum}/failureScenarioFile/${failtype=nodeFailure10pc}/case0/failureNode_${graphtype}_${N}.csv"
#**.routingConfigurator.failureLinkSimulationFile = "networks/physicalTopo/${graphtype}/g${graphnum}/failureScenarioFile/${failtype=partition2}/case0/failureLink_${graphtype}_${N}.csv"
**.routingConfigurator.failureRingPartitionFile = "networks/physicalTopo/${graphtype}/g${graphnum}/failureScenarioFile/${failtype}/case0/failurePartition_${graphtype}_${N}.csv"

**.node*.routing.sendTestPacket = true
**.node*.routing.testDstAssignmentFile = "networks/physicalTopo/${graphtype}/g${graphnum}/testDst_${graphtype}_${N}.csv"
#**.node*.routing.testDstAssignmentFile = "networks/physicalTopo/${graphtype}/g${graphnum}/failureScenarioFile/nodeFailure15pc/case0/testDst_${graphtype}_${N}.csv"

#**.node*.routing.recordReceivedMsg = true
#**.node*.routing.recordDroppedMsg = false

# Vrr
#**.node*.routing.resultNodeCSVFile = "${resultdir}/${graphtype}/g${graphnum}/${faildir=nodeFailure15pc_heal}/${vsetdir=vsetHalfCard2}/case0-r${repeatnum}/nodeStats_${graphtype}_${N}.csv"
#**.node*.routing.resultTestCSVFile = "${resultdir}/${graphtype}/g${graphnum}/${faildir}/${vsetdir}/case0-r${repeatnum}/sendRecords_${graphtype}_${N}.csv"
#cmdenv-output-file = "${resultdir}/${graphtype}/g${graphnum}/${faildir}/${vsetdir}/case0-r${repeatnum}/cmdenvlog_${graphtype}_${N}.out"
# Vlr
**.node*.routing.resultNodeCSVFile = "${resultdir}/${graphtype}/g${graphnum}/${faildir=${failtype}_heal}/vsetHalfCard${vcard}-${backupvcard}/rootNoFixed-noReDism-case0-r${repeatnum}/nodeStats_${graphtype}_${N}.csv"
**.node*.routing.resultTestCSVFile = "${resultdir}/${graphtype}/g${graphnum}/${faildir}/vsetHalfCard${vcard}-${backupvcard}/rootNoFixed-noReDism-case0-r${repeatnum}/sendRecords_${graphtype}_${N}.csv"
#cmdenv-output-file = "${resultdir}/${graphtype}/g${graphnum}/${faildir}/vsetHalfCard${vcard}-${backupvcard}/rootNoFixed-noReDism-case0-r${repeatnum}/cmdenvlog_${graphtype}_${N}.out"

# Vlr nofailure
#**.node*.routing.resultNodeCSVFile = "${resultdir}/${graphtype}/g${graphnum}/${faildir=nofailure}/vsetHalfCard${vcard}-${backupvcard}/rootNoFixed-r${repeatnum}/nodeStats_${graphtype}_${N}.csv"
#**.node*.routing.resultTestCSVFile = "${resultdir}/${graphtype}/g${graphnum}/${faildir}/vsetHalfCard${vcard}-${backupvcard}/rootNoFixed-r${repeatnum}/sendRecords_${graphtype}_${N}.csv"


#**.node*.routing.firstRepSeqTimeoutCSVFile = "${resultdir}/nofailure/repSeqTimeout-resend_pathGraph_${N}.csv"
#**.node*.routing.totalNumBeacomSentCSVFile = "${resultdir}/nofailure/numBeaconSent-resend_pathGraph_${N}.csv"
##**.node*.routing.firstRepSeqTimeoutCSVFile = "${resultdir}/nofailure/repSeqTimeout-resend_squareGrid-repAtCentre_${N}.csv"
##**.node*.routing.totalNumBeacomSentCSVFile = "${resultdir}/nofailure/numBeaconSent-resend_squareGrid-repAtCentre_${N}.csv"
#**.node*.routing.totalNumBeacomSentWriteTime = 10000
#**.node*.routing.repFixedEarlyBeaconOnNewRepSeqNum = false
#**.node*.routing.repFixedBeaconExcludeOldRepSeqNum = false
#**.node*.routing.simulationSeed = ${repetition}

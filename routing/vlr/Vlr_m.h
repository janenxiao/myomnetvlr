//
// Generated file, do not edit! Created by opp_msgtool 6.0 from routing/vlr/Vlr.msg.
//

#ifndef __OMNETVLR_VLR_M_H
#define __OMNETVLR_VLR_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace omnetvlr {

struct VlrIntRepState;
class WaitSetupReqIntTimer;
class FailedPacketDelayTimer;
class WaitRepairLinkIntTimer;
class VlrIntBeacon;
class NotifyLinkFailureInt;
class VlrIntOption;
class VlrIntUniPacket;
class VlrIntSetupPacket;
class SetupReqInt;
class SetupReplyInt;
class SetupFailInt;
class AddRouteInt;
class TeardownInt;
class DismantleInt;
class VlrIntTestPacket;
class RepairLinkReqFloodInt;
class RepairLinkReplyInt;
class RepairLinkFailInt;
class RepairRouteInt;
class NotifyVsetInt;
class RepairLocalReqFloodInt;
class RepairLocalReplyInt;
class RepairLocalPrevInt;

}  // namespace omnetvlr

// cplusplus {{
#include "VlrDefs.h"
// }}


namespace omnetvlr {

// cplusplus {{
typedef std::set<unsigned int> VlrIntVidSet;
typedef std::vector<unsigned int> VlrIntVidVec;
//typedef std::vector<std::pair<unsigned int, unsigned int>> VlrIntVidPairVec;		// used in SetupReqTrace
//typedef std::vector<VlrPathID> VlrIntPathidVec;
typedef std::map<unsigned int, std::set<VlrPathID>> VlrIntVidToPathidSetMap;		// used in RepairLinkReqFlood
typedef std::map<VlrPathID, std::vector<unsigned int>> VlrIntPathidToVidVecMap;		// used in RepairLocalReply
// }}

/**
 * Struct generated from routing/vlr/Vlr.msg:50 by opp_msgtool.
 */
struct VlrIntRepState
{
    VlrIntRepState();
    unsigned int vid = 0;
    unsigned int sequencenumber = 0;
    bool inNetwork = false;
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const VlrIntRepState& a);
void __doUnpacking(omnetpp::cCommBuffer *b, VlrIntRepState& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VlrIntRepState& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VlrIntRepState& obj) { __doUnpacking(b, obj); }

/**
 * Class generated from <tt>routing/vlr/Vlr.msg:61</tt> by opp_msgtool.
 * <pre>
 * //
 * // Represents an internal timer for a reply to SetupReq
 * //
 * message WaitSetupReqIntTimer
 * {
 *     unsigned int dst;
 *     int retryCount;
 *     bool repairRoute;   // if setupReq should be sent with repairRoute=true
 *     VlrPathID patchedRoute;   // valid only if repairRoute=true, the patched vroute to follow to send setupReq to dst
 *     // bool allowSetupReqTrace;   // if setupReqTrace should be sent after setupReqRetryLimit has been reached
 *     bool reqVnei;   // if setupReq should be sent with reqVnei=true
 *     unsigned int alterPendingVnei;   // valid only if reqVnei=true, subsequent node in pendingVset that's farther but in same direction to me as dst, if set and alterPendingVnei has been added vset, I'll not try another pendingVnei
 *     char timerType;   // location of this WaitSetupReqIntTimer, 0: pendingVset[dst], 1: vset[dst], 2: repairRouteSetupReq[patchedRoute]
 * }
 * </pre>
 */
class WaitSetupReqIntTimer : public ::omnetpp::cMessage
{
  protected:
    unsigned int dst = 0;
    int retryCount = 0;
    bool repairRoute = false;
    VlrPathID patchedRoute;
    bool reqVnei = false;
    unsigned int alterPendingVnei = 0;
    char timerType = 0;

  private:
    void copy(const WaitSetupReqIntTimer& other);

  protected:
    bool operator==(const WaitSetupReqIntTimer&) = delete;

  public:
    WaitSetupReqIntTimer(const char *name=nullptr, short kind=0);
    WaitSetupReqIntTimer(const WaitSetupReqIntTimer& other);
    virtual ~WaitSetupReqIntTimer();
    WaitSetupReqIntTimer& operator=(const WaitSetupReqIntTimer& other);
    virtual WaitSetupReqIntTimer *dup() const override {return new WaitSetupReqIntTimer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual unsigned int getDst() const;
    virtual void setDst(unsigned int dst);

    virtual int getRetryCount() const;
    virtual void setRetryCount(int retryCount);

    virtual bool getRepairRoute() const;
    virtual void setRepairRoute(bool repairRoute);

    virtual const VlrPathID& getPatchedRoute() const;
    virtual VlrPathID& getPatchedRouteForUpdate() { return const_cast<VlrPathID&>(const_cast<WaitSetupReqIntTimer*>(this)->getPatchedRoute());}
    virtual void setPatchedRoute(const VlrPathID& patchedRoute);

    virtual bool getReqVnei() const;
    virtual void setReqVnei(bool reqVnei);

    virtual unsigned int getAlterPendingVnei() const;
    virtual void setAlterPendingVnei(unsigned int alterPendingVnei);

    virtual char getTimerType() const;
    virtual void setTimerType(char timerType);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WaitSetupReqIntTimer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WaitSetupReqIntTimer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>routing/vlr/Vlr.msg:76</tt> by opp_msgtool.
 * <pre>
 * //
 * // Represents an internal timer to simulate delay in detecting that a packet can't be sent bc next hop isn't linked
 * //
 * message FailedPacketDelayTimer
 * {
 *     int failedGateIndex;
 *     unsigned int failedPnei;
 *     cPacket *failedPacket;
 * }
 * </pre>
 */
class FailedPacketDelayTimer : public ::omnetpp::cMessage
{
  protected:
    int failedGateIndex = 0;
    unsigned int failedPnei = 0;
    ::omnetpp::cPacket * failedPacket = nullptr;

  private:
    void copy(const FailedPacketDelayTimer& other);

  protected:
    bool operator==(const FailedPacketDelayTimer&) = delete;

  public:
    FailedPacketDelayTimer(const char *name=nullptr, short kind=0);
    FailedPacketDelayTimer(const FailedPacketDelayTimer& other);
    virtual ~FailedPacketDelayTimer();
    FailedPacketDelayTimer& operator=(const FailedPacketDelayTimer& other);
    virtual FailedPacketDelayTimer *dup() const override {return new FailedPacketDelayTimer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getFailedGateIndex() const;
    virtual void setFailedGateIndex(int failedGateIndex);

    virtual unsigned int getFailedPnei() const;
    virtual void setFailedPnei(unsigned int failedPnei);

    virtual const ::omnetpp::cPacket * getFailedPacket() const;
    virtual ::omnetpp::cPacket * getFailedPacketForUpdate() { return const_cast<::omnetpp::cPacket *>(const_cast<FailedPacketDelayTimer*>(this)->getFailedPacket());}
    virtual void setFailedPacket(::omnetpp::cPacket * failedPacket);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const FailedPacketDelayTimer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, FailedPacketDelayTimer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>routing/vlr/Vlr.msg:86</tt> by opp_msgtool.
 * <pre>
 * //
 * // Represents an internal timer for a reply to RepairLinkReq
 * //
 * message WaitRepairLinkIntTimer
 * {
 *     unsigned int dst;
 *     int retryCount;
 * }
 * </pre>
 */
class WaitRepairLinkIntTimer : public ::omnetpp::cMessage
{
  protected:
    unsigned int dst = 0;
    int retryCount = 0;

  private:
    void copy(const WaitRepairLinkIntTimer& other);

  protected:
    bool operator==(const WaitRepairLinkIntTimer&) = delete;

  public:
    WaitRepairLinkIntTimer(const char *name=nullptr, short kind=0);
    WaitRepairLinkIntTimer(const WaitRepairLinkIntTimer& other);
    virtual ~WaitRepairLinkIntTimer();
    WaitRepairLinkIntTimer& operator=(const WaitRepairLinkIntTimer& other);
    virtual WaitRepairLinkIntTimer *dup() const override {return new WaitRepairLinkIntTimer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual unsigned int getDst() const;
    virtual void setDst(unsigned int dst);

    virtual int getRetryCount() const;
    virtual void setRetryCount(int retryCount);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WaitRepairLinkIntTimer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WaitRepairLinkIntTimer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>routing/vlr/Vlr.msg:96</tt> by opp_msgtool.
 * <pre>
 * //
 * // The beacon packet is sent periodically by all VLR routers to notify
 * // the neighbors about the router's vid.
 * //
 * packet VlrIntBeacon
 * {
 *     unsigned int vid;
 *     bool inNetwork;
 *     VlrIntRepState repstate;
 *     VlrIntRepState repstate2;
 *     unsigned int psetNeighbour[];
 *     bool psetNeighbourIsLinked[];      // psetNeighbourIsLinked[i] indicates whether psetNeighbour[i] is a linked pnei of sender
 *     bool psetNeighbourIsInNetwork[];   // psetNeighbourIsInNetwork[i] indicates whether psetNeighbour[i] is inNetwork
 * }
 * </pre>
 */
class VlrIntBeacon : public ::omnetpp::cPacket
{
  protected:
    unsigned int vid = 0;
    bool inNetwork = false;
    VlrIntRepState repstate;
    VlrIntRepState repstate2;
    unsigned int *psetNeighbour = nullptr;
    size_t psetNeighbour_arraysize = 0;
    bool *psetNeighbourIsLinked = nullptr;
    size_t psetNeighbourIsLinked_arraysize = 0;
    bool *psetNeighbourIsInNetwork = nullptr;
    size_t psetNeighbourIsInNetwork_arraysize = 0;

  private:
    void copy(const VlrIntBeacon& other);

  protected:
    bool operator==(const VlrIntBeacon&) = delete;

  public:
    VlrIntBeacon(const char *name=nullptr, short kind=0);
    VlrIntBeacon(const VlrIntBeacon& other);
    virtual ~VlrIntBeacon();
    VlrIntBeacon& operator=(const VlrIntBeacon& other);
    virtual VlrIntBeacon *dup() const override {return new VlrIntBeacon(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual unsigned int getVid() const;
    virtual void setVid(unsigned int vid);

    virtual bool getInNetwork() const;
    virtual void setInNetwork(bool inNetwork);

    virtual const VlrIntRepState& getRepstate() const;
    virtual VlrIntRepState& getRepstateForUpdate() { return const_cast<VlrIntRepState&>(const_cast<VlrIntBeacon*>(this)->getRepstate());}
    virtual void setRepstate(const VlrIntRepState& repstate);

    virtual const VlrIntRepState& getRepstate2() const;
    virtual VlrIntRepState& getRepstate2ForUpdate() { return const_cast<VlrIntRepState&>(const_cast<VlrIntBeacon*>(this)->getRepstate2());}
    virtual void setRepstate2(const VlrIntRepState& repstate2);

    virtual void setPsetNeighbourArraySize(size_t size);
    virtual size_t getPsetNeighbourArraySize() const;
    virtual unsigned int getPsetNeighbour(size_t k) const;
    virtual void setPsetNeighbour(size_t k, unsigned int psetNeighbour);
    virtual void insertPsetNeighbour(size_t k, unsigned int psetNeighbour);
    [[deprecated]] void insertPsetNeighbour(unsigned int psetNeighbour) {appendPsetNeighbour(psetNeighbour);}
    virtual void appendPsetNeighbour(unsigned int psetNeighbour);
    virtual void erasePsetNeighbour(size_t k);

    virtual void setPsetNeighbourIsLinkedArraySize(size_t size);
    virtual size_t getPsetNeighbourIsLinkedArraySize() const;
    virtual bool getPsetNeighbourIsLinked(size_t k) const;
    virtual void setPsetNeighbourIsLinked(size_t k, bool psetNeighbourIsLinked);
    virtual void insertPsetNeighbourIsLinked(size_t k, bool psetNeighbourIsLinked);
    [[deprecated]] void insertPsetNeighbourIsLinked(bool psetNeighbourIsLinked) {appendPsetNeighbourIsLinked(psetNeighbourIsLinked);}
    virtual void appendPsetNeighbourIsLinked(bool psetNeighbourIsLinked);
    virtual void erasePsetNeighbourIsLinked(size_t k);

    virtual void setPsetNeighbourIsInNetworkArraySize(size_t size);
    virtual size_t getPsetNeighbourIsInNetworkArraySize() const;
    virtual bool getPsetNeighbourIsInNetwork(size_t k) const;
    virtual void setPsetNeighbourIsInNetwork(size_t k, bool psetNeighbourIsInNetwork);
    virtual void insertPsetNeighbourIsInNetwork(size_t k, bool psetNeighbourIsInNetwork);
    [[deprecated]] void insertPsetNeighbourIsInNetwork(bool psetNeighbourIsInNetwork) {appendPsetNeighbourIsInNetwork(psetNeighbourIsInNetwork);}
    virtual void appendPsetNeighbourIsInNetwork(bool psetNeighbourIsInNetwork);
    virtual void erasePsetNeighbourIsInNetwork(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VlrIntBeacon& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VlrIntBeacon& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>routing/vlr/Vlr.msg:109</tt> by opp_msgtool.
 * <pre>
 * //
 * // notify my pnei to simulate a link failure between us, uses unsigned int for vid
 * //
 * packet NotifyLinkFailureInt
 * {
 *     unsigned int src;
 *     bool simLinkUp;      // if true, link btw src and me should restart 
 * }
 * </pre>
 */
class NotifyLinkFailureInt : public ::omnetpp::cPacket
{
  protected:
    unsigned int src = 0;
    bool simLinkUp = false;

  private:
    void copy(const NotifyLinkFailureInt& other);

  protected:
    bool operator==(const NotifyLinkFailureInt&) = delete;

  public:
    NotifyLinkFailureInt(const char *name=nullptr, short kind=0);
    NotifyLinkFailureInt(const NotifyLinkFailureInt& other);
    virtual ~NotifyLinkFailureInt();
    NotifyLinkFailureInt& operator=(const NotifyLinkFailureInt& other);
    virtual NotifyLinkFailureInt *dup() const override {return new NotifyLinkFailureInt(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual unsigned int getSrc() const;
    virtual void setSrc(unsigned int src);

    virtual bool getSimLinkUp() const;
    virtual void setSimLinkUp(bool simLinkUp);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NotifyLinkFailureInt& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NotifyLinkFailureInt& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>routing/vlr/Vlr.msg:117</tt> by opp_msgtool.
 * <pre>
 * //
 * // The TlvOption is used to add extra routing information for network datagrams.
 * //
 * class VlrIntOption
 * {
 *     unsigned int dstVid;
 *     unsigned int towardVid;
 *     VlrPathID currentPathid;
 *     unsigned int tempTowardVid;
 *     VlrPathID tempPathid;
 * 
 *     unsigned int prevHopVid;
 * }
 * </pre>
 */
class VlrIntOption
{
  protected:
    unsigned int dstVid = 0;
    unsigned int towardVid = 0;
    VlrPathID currentPathid;
    unsigned int tempTowardVid = 0;
    VlrPathID tempPathid;
    unsigned int prevHopVid = 0;

  private:
    void copy(const VlrIntOption& other);

  protected:
    bool operator==(const VlrIntOption&) = delete;

  public:
    VlrIntOption();
    VlrIntOption(const VlrIntOption& other);
    virtual ~VlrIntOption();
    VlrIntOption& operator=(const VlrIntOption& other);
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    virtual unsigned int getDstVid() const;
    virtual void setDstVid(unsigned int dstVid);

    virtual unsigned int getTowardVid() const;
    virtual void setTowardVid(unsigned int towardVid);

    virtual const VlrPathID& getCurrentPathid() const;
    virtual VlrPathID& getCurrentPathidForUpdate() { return const_cast<VlrPathID&>(const_cast<VlrIntOption*>(this)->getCurrentPathid());}
    virtual void setCurrentPathid(const VlrPathID& currentPathid);

    virtual unsigned int getTempTowardVid() const;
    virtual void setTempTowardVid(unsigned int tempTowardVid);

    virtual const VlrPathID& getTempPathid() const;
    virtual VlrPathID& getTempPathidForUpdate() { return const_cast<VlrPathID&>(const_cast<VlrIntOption*>(this)->getTempPathid());}
    virtual void setTempPathid(const VlrPathID& tempPathid);

    virtual unsigned int getPrevHopVid() const;
    virtual void setPrevHopVid(unsigned int prevHopVid);
};

/**
 * Class generated from <tt>routing/vlr/Vlr.msg:130</tt> by opp_msgtool.
 * <pre>
 * //
 * // VLR unicast packet (uses VLR protocol) that uses unsigned int for vid
 * //
 * packet VlrIntUniPacket
 * {
 *     unsigned int messageId;  // message id at the src   // for statistics
 *     VlrIntOption vlrOption;
 *     unsigned int hopcount;      // for statistics
 * }
 * </pre>
 */
class VlrIntUniPacket : public ::omnetpp::cPacket
{
  protected:
    unsigned int messageId = 0;
    VlrIntOption vlrOption;
    unsigned int hopcount = 0;

  private:
    void copy(const VlrIntUniPacket& other);

  protected:
    bool operator==(const VlrIntUniPacket&) = delete;

  public:
    VlrIntUniPacket(const char *name=nullptr, short kind=0);
    VlrIntUniPacket(const VlrIntUniPacket& other);
    virtual ~VlrIntUniPacket();
    VlrIntUniPacket& operator=(const VlrIntUniPacket& other);
    virtual VlrIntUniPacket *dup() const override {return new VlrIntUniPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual unsigned int getMessageId() const;
    virtual void setMessageId(unsigned int messageId);

    virtual const VlrIntOption& getVlrOption() const;
    virtual VlrIntOption& getVlrOptionForUpdate() { return const_cast<VlrIntOption&>(const_cast<VlrIntUniPacket*>(this)->getVlrOption());}
    virtual void setVlrOption(const VlrIntOption& vlrOption);

    virtual unsigned int getHopcount() const;
    virtual void setHopcount(unsigned int hopcount);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VlrIntUniPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VlrIntUniPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>routing/vlr/Vlr.msg:139</tt> by opp_msgtool.
 * <pre>
 * //
 * // VLR overlay setup packet that uses unsigned int for vid
 * //
 * class VlrIntSetupPacket extends VlrIntUniPacket
 * {
 *     unsigned int srcVset[];
 * }
 * </pre>
 */
class VlrIntSetupPacket : public ::omnetvlr::VlrIntUniPacket
{
  protected:
    unsigned int *srcVset = nullptr;
    size_t srcVset_arraysize = 0;

  private:
    void copy(const VlrIntSetupPacket& other);

  protected:
    bool operator==(const VlrIntSetupPacket&) = delete;

  public:
    VlrIntSetupPacket(const char *name=nullptr);
    VlrIntSetupPacket(const VlrIntSetupPacket& other);
    virtual ~VlrIntSetupPacket();
    VlrIntSetupPacket& operator=(const VlrIntSetupPacket& other);
    virtual VlrIntSetupPacket *dup() const override {return new VlrIntSetupPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual void setSrcVsetArraySize(size_t size);
    virtual size_t getSrcVsetArraySize() const;
    virtual unsigned int getSrcVset(size_t k) const;
    virtual void setSrcVset(size_t k, unsigned int srcVset);
    virtual void insertSrcVset(size_t k, unsigned int srcVset);
    [[deprecated]] void insertSrcVset(unsigned int srcVset) {appendSrcVset(srcVset);}
    virtual void appendSrcVset(unsigned int srcVset);
    virtual void eraseSrcVset(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VlrIntSetupPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VlrIntSetupPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>routing/vlr/Vlr.msg:147</tt> by opp_msgtool.
 * <pre>
 * //
 * // setupReq that uses unsigned int for vid
 * //
 * class SetupReqInt extends VlrIntSetupPacket
 * {
 *     unsigned int dst;
 *     unsigned int newnode;
 *     unsigned int proxy;
 *     // unsigned int removedNei;
 *     unsigned int transferNode;
 *     VlrIntVidSet knownSet;
 *     bool reqDispatch;       // if newnode needs setupReq to be dispatched to potential vneis except dst
 *     bool repairRoute;       // if newnode is repairing an existing vset-route to dst, if true, traceVec is provided
 *     VlrPathID patchedRoute; // if repairRoute=true, indicates the patched route that this setupReq is repairing
 *     bool recordTrace;       // if nodes traversed by this setupReq should be recorded in traceVec
 *     bool reqVnei;           // if newnode is requesting dst to be its vnei
 *     VlrIntVidVec traceVec;
 *     unsigned int indexInTrace;    // index of myself in traceVec, only used when traceVec.size() > 0 and recordTrace == false, meaning path of this setupReq is specified
 * }
 * </pre>
 */
class SetupReqInt : public ::omnetvlr::VlrIntSetupPacket
{
  protected:
    unsigned int dst = 0;
    unsigned int newnode = 0;
    unsigned int proxy = 0;
    unsigned int transferNode = 0;
    VlrIntVidSet knownSet;
    bool reqDispatch = false;
    bool repairRoute = false;
    VlrPathID patchedRoute;
    bool recordTrace = false;
    bool reqVnei = false;
    VlrIntVidVec traceVec;
    unsigned int indexInTrace = 0;

  private:
    void copy(const SetupReqInt& other);

  protected:
    bool operator==(const SetupReqInt&) = delete;

  public:
    SetupReqInt(const char *name=nullptr);
    SetupReqInt(const SetupReqInt& other);
    virtual ~SetupReqInt();
    SetupReqInt& operator=(const SetupReqInt& other);
    virtual SetupReqInt *dup() const override {return new SetupReqInt(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual unsigned int getDst() const;
    virtual void setDst(unsigned int dst);

    virtual unsigned int getNewnode() const;
    virtual void setNewnode(unsigned int newnode);

    virtual unsigned int getProxy() const;
    virtual void setProxy(unsigned int proxy);

    virtual unsigned int getTransferNode() const;
    virtual void setTransferNode(unsigned int transferNode);

    virtual const VlrIntVidSet& getKnownSet() const;
    virtual VlrIntVidSet& getKnownSetForUpdate() { return const_cast<VlrIntVidSet&>(const_cast<SetupReqInt*>(this)->getKnownSet());}
    virtual void setKnownSet(const VlrIntVidSet& knownSet);

    virtual bool getReqDispatch() const;
    virtual void setReqDispatch(bool reqDispatch);

    virtual bool getRepairRoute() const;
    virtual void setRepairRoute(bool repairRoute);

    virtual const VlrPathID& getPatchedRoute() const;
    virtual VlrPathID& getPatchedRouteForUpdate() { return const_cast<VlrPathID&>(const_cast<SetupReqInt*>(this)->getPatchedRoute());}
    virtual void setPatchedRoute(const VlrPathID& patchedRoute);

    virtual bool getRecordTrace() const;
    virtual void setRecordTrace(bool recordTrace);

    virtual bool getReqVnei() const;
    virtual void setReqVnei(bool reqVnei);

    virtual const VlrIntVidVec& getTraceVec() const;
    virtual VlrIntVidVec& getTraceVecForUpdate() { return const_cast<VlrIntVidVec&>(const_cast<SetupReqInt*>(this)->getTraceVec());}
    virtual void setTraceVec(const VlrIntVidVec& traceVec);

    virtual unsigned int getIndexInTrace() const;
    virtual void setIndexInTrace(unsigned int indexInTrace);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SetupReqInt& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SetupReqInt& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>routing/vlr/Vlr.msg:167</tt> by opp_msgtool.
 * <pre>
 * //
 * // setup that uses unsigned int for vid
 * //
 * class SetupReplyInt extends VlrIntSetupPacket
 * {
 *     unsigned int proxy;
 *     unsigned int newnode;
 *     unsigned int src;
 *     VlrPathID pathid;
 *     VlrIntVidVec trace;         // if specified, not using greedy routing
 *     VlrIntVidVec prevhopVids;
 *     unsigned int oldestPrevhopIndex;
 *     // bool reqVnei;               // if src is requesting newnode to be its vnei, if false, this setupReply builds a second vset-route btw src and newnode
 *     // unsigned int hopcount;      // for statistics
 * }
 * </pre>
 */
class SetupReplyInt : public ::omnetvlr::VlrIntSetupPacket
{
  protected:
    unsigned int proxy = 0;
    unsigned int newnode = 0;
    unsigned int src = 0;
    VlrPathID pathid;
    VlrIntVidVec trace;
    VlrIntVidVec prevhopVids;
    unsigned int oldestPrevhopIndex = 0;

  private:
    void copy(const SetupReplyInt& other);

  protected:
    bool operator==(const SetupReplyInt&) = delete;

  public:
    SetupReplyInt(const char *name=nullptr);
    SetupReplyInt(const SetupReplyInt& other);
    virtual ~SetupReplyInt();
    SetupReplyInt& operator=(const SetupReplyInt& other);
    virtual SetupReplyInt *dup() const override {return new SetupReplyInt(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual unsigned int getProxy() const;
    virtual void setProxy(unsigned int proxy);

    virtual unsigned int getNewnode() const;
    virtual void setNewnode(unsigned int newnode);

    virtual unsigned int getSrc() const;
    virtual void setSrc(unsigned int src);

    virtual const VlrPathID& getPathid() const;
    virtual VlrPathID& getPathidForUpdate() { return const_cast<VlrPathID&>(const_cast<SetupReplyInt*>(this)->getPathid());}
    virtual void setPathid(const VlrPathID& pathid);

    virtual const VlrIntVidVec& getTrace() const;
    virtual VlrIntVidVec& getTraceForUpdate() { return const_cast<VlrIntVidVec&>(const_cast<SetupReplyInt*>(this)->getTrace());}
    virtual void setTrace(const VlrIntVidVec& trace);

    virtual const VlrIntVidVec& getPrevhopVids() const;
    virtual VlrIntVidVec& getPrevhopVidsForUpdate() { return const_cast<VlrIntVidVec&>(const_cast<SetupReplyInt*>(this)->getPrevhopVids());}
    virtual void setPrevhopVids(const VlrIntVidVec& prevhopVids);

    virtual unsigned int getOldestPrevhopIndex() const;
    virtual void setOldestPrevhopIndex(unsigned int oldestPrevhopIndex);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SetupReplyInt& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SetupReplyInt& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>routing/vlr/Vlr.msg:183</tt> by opp_msgtool.
 * <pre>
 * //
 * // setupFail that uses unsigned int for vid
 * //
 * class SetupFailInt extends VlrIntSetupPacket
 * {
 *     unsigned int proxy;
 *     unsigned int newnode;
 *     unsigned int src;
 *     // bool notifyVsetOnly;            // if true, this SetupFail is only used as a NotifyVset to newnode
 *     VlrIntVidVec trace;         // if specified, not using greedy routing
 * }
 * </pre>
 */
class SetupFailInt : public ::omnetvlr::VlrIntSetupPacket
{
  protected:
    unsigned int proxy = 0;
    unsigned int newnode = 0;
    unsigned int src = 0;
    VlrIntVidVec trace;

  private:
    void copy(const SetupFailInt& other);

  protected:
    bool operator==(const SetupFailInt&) = delete;

  public:
    SetupFailInt(const char *name=nullptr);
    SetupFailInt(const SetupFailInt& other);
    virtual ~SetupFailInt();
    SetupFailInt& operator=(const SetupFailInt& other);
    virtual SetupFailInt *dup() const override {return new SetupFailInt(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual unsigned int getProxy() const;
    virtual void setProxy(unsigned int proxy);

    virtual unsigned int getNewnode() const;
    virtual void setNewnode(unsigned int newnode);

    virtual unsigned int getSrc() const;
    virtual void setSrc(unsigned int src);

    virtual const VlrIntVidVec& getTrace() const;
    virtual VlrIntVidVec& getTraceForUpdate() { return const_cast<VlrIntVidVec&>(const_cast<SetupFailInt*>(this)->getTrace());}
    virtual void setTrace(const VlrIntVidVec& trace);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SetupFailInt& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SetupFailInt& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>routing/vlr/Vlr.msg:194</tt> by opp_msgtool.
 * <pre>
 * //
 * // setup a non-essential vroute, uses unsigned int for vid
 * //
 * class AddRouteInt extends VlrIntSetupPacket
 * {
 *     unsigned int dst;
 *     unsigned int src;
 *     unsigned int proxy;         // for testing purpose only
 *     VlrPathID pathid;
 *     VlrIntVidVec trace;         // if specified, not using greedy routing
 *     VlrIntVidVec prevhopVids;
 *     unsigned int oldestPrevhopIndex;
 *     // unsigned int hopcount;      // for statistics
 * }
 * </pre>
 */
class AddRouteInt : public ::omnetvlr::VlrIntSetupPacket
{
  protected:
    unsigned int dst = 0;
    unsigned int src = 0;
    unsigned int proxy = 0;
    VlrPathID pathid;
    VlrIntVidVec trace;
    VlrIntVidVec prevhopVids;
    unsigned int oldestPrevhopIndex = 0;

  private:
    void copy(const AddRouteInt& other);

  protected:
    bool operator==(const AddRouteInt&) = delete;

  public:
    AddRouteInt(const char *name=nullptr);
    AddRouteInt(const AddRouteInt& other);
    virtual ~AddRouteInt();
    AddRouteInt& operator=(const AddRouteInt& other);
    virtual AddRouteInt *dup() const override {return new AddRouteInt(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual unsigned int getDst() const;
    virtual void setDst(unsigned int dst);

    virtual unsigned int getSrc() const;
    virtual void setSrc(unsigned int src);

    virtual unsigned int getProxy() const;
    virtual void setProxy(unsigned int proxy);

    virtual const VlrPathID& getPathid() const;
    virtual VlrPathID& getPathidForUpdate() { return const_cast<VlrPathID&>(const_cast<AddRouteInt*>(this)->getPathid());}
    virtual void setPathid(const VlrPathID& pathid);

    virtual const VlrIntVidVec& getTrace() const;
    virtual VlrIntVidVec& getTraceForUpdate() { return const_cast<VlrIntVidVec&>(const_cast<AddRouteInt*>(this)->getTrace());}
    virtual void setTrace(const VlrIntVidVec& trace);

    virtual const VlrIntVidVec& getPrevhopVids() const;
    virtual VlrIntVidVec& getPrevhopVidsForUpdate() { return const_cast<VlrIntVidVec&>(const_cast<AddRouteInt*>(this)->getPrevhopVids());}
    virtual void setPrevhopVids(const VlrIntVidVec& prevhopVids);

    virtual unsigned int getOldestPrevhopIndex() const;
    virtual void setOldestPrevhopIndex(unsigned int oldestPrevhopIndex);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AddRouteInt& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AddRouteInt& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>routing/vlr/Vlr.msg:209</tt> by opp_msgtool.
 * <pre>
 * //
 * // teardown that uses unsigned int for vid
 * //
 * class TeardownInt extends VlrIntSetupPacket
 * {
 *     VlrPathID pathids[];
 *     unsigned int src;       // initiator of this Teardown
 *     bool rebuild;           // if src thinks vroute btw two endpoints should be rebuilt, default true, false if src no longer needs the vroute (value only considered by endpoint if src is the other endpoint)
 *     bool dismantled;        // if src thinks (at least some) vroute in pathids should be kept in vlrRoutingTable as dismantled route rather than being deleted
 * }
 * </pre>
 */
class TeardownInt : public ::omnetvlr::VlrIntSetupPacket
{
  protected:
    VlrPathID *pathids = nullptr;
    size_t pathids_arraysize = 0;
    unsigned int src = 0;
    bool rebuild = false;
    bool dismantled = false;

  private:
    void copy(const TeardownInt& other);

  protected:
    bool operator==(const TeardownInt&) = delete;

  public:
    TeardownInt(const char *name=nullptr);
    TeardownInt(const TeardownInt& other);
    virtual ~TeardownInt();
    TeardownInt& operator=(const TeardownInt& other);
    virtual TeardownInt *dup() const override {return new TeardownInt(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual void setPathidsArraySize(size_t size);
    virtual size_t getPathidsArraySize() const;
    virtual const VlrPathID& getPathids(size_t k) const;
    virtual VlrPathID& getPathidsForUpdate(size_t k) { return const_cast<VlrPathID&>(const_cast<TeardownInt*>(this)->getPathids(k));}
    virtual void setPathids(size_t k, const VlrPathID& pathids);
    virtual void insertPathids(size_t k, const VlrPathID& pathids);
    [[deprecated]] void insertPathids(const VlrPathID& pathids) {appendPathids(pathids);}
    virtual void appendPathids(const VlrPathID& pathids);
    virtual void erasePathids(size_t k);

    virtual unsigned int getSrc() const;
    virtual void setSrc(unsigned int src);

    virtual bool getRebuild() const;
    virtual void setRebuild(bool rebuild);

    virtual bool getDismantled() const;
    virtual void setDismantled(bool dismantled);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TeardownInt& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TeardownInt& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>routing/vlr/Vlr.msg:220</tt> by opp_msgtool.
 * <pre>
 * //
 * // teardown that uses unsigned int for vid
 * //
 * class DismantleInt extends VlrIntSetupPacket
 * {
 *     VlrPathID pathids[];
 *     unsigned int src;       // initiator of this Teardown
 * }
 * </pre>
 */
class DismantleInt : public ::omnetvlr::VlrIntSetupPacket
{
  protected:
    VlrPathID *pathids = nullptr;
    size_t pathids_arraysize = 0;
    unsigned int src = 0;

  private:
    void copy(const DismantleInt& other);

  protected:
    bool operator==(const DismantleInt&) = delete;

  public:
    DismantleInt(const char *name=nullptr);
    DismantleInt(const DismantleInt& other);
    virtual ~DismantleInt();
    DismantleInt& operator=(const DismantleInt& other);
    virtual DismantleInt *dup() const override {return new DismantleInt(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual void setPathidsArraySize(size_t size);
    virtual size_t getPathidsArraySize() const;
    virtual const VlrPathID& getPathids(size_t k) const;
    virtual VlrPathID& getPathidsForUpdate(size_t k) { return const_cast<VlrPathID&>(const_cast<DismantleInt*>(this)->getPathids(k));}
    virtual void setPathids(size_t k, const VlrPathID& pathids);
    virtual void insertPathids(size_t k, const VlrPathID& pathids);
    [[deprecated]] void insertPathids(const VlrPathID& pathids) {appendPathids(pathids);}
    virtual void appendPathids(const VlrPathID& pathids);
    virtual void erasePathids(size_t k);

    virtual unsigned int getSrc() const;
    virtual void setSrc(unsigned int src);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DismantleInt& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DismantleInt& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>routing/vlr/Vlr.msg:228</tt> by opp_msgtool.
 * <pre>
 * //
 * // test message to measure route length that uses unsigned int for vid
 * //
 * class VlrIntTestPacket extends VlrIntUniPacket
 * {
 *     unsigned int dst;
 *     unsigned int src;
 *     // unsigned int hopcount;
 * }
 * </pre>
 */
class VlrIntTestPacket : public ::omnetvlr::VlrIntUniPacket
{
  protected:
    unsigned int dst = 0;
    unsigned int src = 0;

  private:
    void copy(const VlrIntTestPacket& other);

  protected:
    bool operator==(const VlrIntTestPacket&) = delete;

  public:
    VlrIntTestPacket(const char *name=nullptr);
    VlrIntTestPacket(const VlrIntTestPacket& other);
    virtual ~VlrIntTestPacket();
    VlrIntTestPacket& operator=(const VlrIntTestPacket& other);
    virtual VlrIntTestPacket *dup() const override {return new VlrIntTestPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual unsigned int getDst() const;
    virtual void setDst(unsigned int dst);

    virtual unsigned int getSrc() const;
    virtual void setSrc(unsigned int src);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VlrIntTestPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VlrIntTestPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>routing/vlr/Vlr.msg:237</tt> by opp_msgtool.
 * <pre>
 * //
 * // repairLinkReq with trace that uses unsigned int for vid
 * //
 * packet RepairLinkReqFloodInt
 * {
 *     VlrIntVidToPathidSetMap dstToPathidsMap;
 *     unsigned int ttl;
 *     unsigned int floodSeqnum;
 *     VlrIntVidVec linkTrace;
 *     // L3Address srcAddress;
 * }
 * </pre>
 */
class RepairLinkReqFloodInt : public ::omnetpp::cPacket
{
  protected:
    VlrIntVidToPathidSetMap dstToPathidsMap;
    unsigned int ttl = 0;
    unsigned int floodSeqnum = 0;
    VlrIntVidVec linkTrace;

  private:
    void copy(const RepairLinkReqFloodInt& other);

  protected:
    bool operator==(const RepairLinkReqFloodInt&) = delete;

  public:
    RepairLinkReqFloodInt(const char *name=nullptr, short kind=0);
    RepairLinkReqFloodInt(const RepairLinkReqFloodInt& other);
    virtual ~RepairLinkReqFloodInt();
    RepairLinkReqFloodInt& operator=(const RepairLinkReqFloodInt& other);
    virtual RepairLinkReqFloodInt *dup() const override {return new RepairLinkReqFloodInt(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const VlrIntVidToPathidSetMap& getDstToPathidsMap() const;
    virtual VlrIntVidToPathidSetMap& getDstToPathidsMapForUpdate() { return const_cast<VlrIntVidToPathidSetMap&>(const_cast<RepairLinkReqFloodInt*>(this)->getDstToPathidsMap());}
    virtual void setDstToPathidsMap(const VlrIntVidToPathidSetMap& dstToPathidsMap);

    virtual unsigned int getTtl() const;
    virtual void setTtl(unsigned int ttl);

    virtual unsigned int getFloodSeqnum() const;
    virtual void setFloodSeqnum(unsigned int floodSeqnum);

    virtual const VlrIntVidVec& getLinkTrace() const;
    virtual VlrIntVidVec& getLinkTraceForUpdate() { return const_cast<VlrIntVidVec&>(const_cast<RepairLinkReqFloodInt*>(this)->getLinkTrace());}
    virtual void setLinkTrace(const VlrIntVidVec& linkTrace);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RepairLinkReqFloodInt& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RepairLinkReqFloodInt& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>routing/vlr/Vlr.msg:248</tt> by opp_msgtool.
 * <pre>
 * //
 * // repairLinkReply with trace that uses unsigned int for vid
 * //
 * class RepairLinkReplyInt extends VlrIntSetupPacket
 * {
 *     unsigned int src;
 *     // L3Address srcAddress;
 *     VlrIntVidVec brokenPathids;		// avoid redefinition of std::vector<unsigned int>
 *     // VlrIntPathidVec brokenPathids;  // dst sent repairLinkReq to src, src is prevhop (or one of prevhopVids) in brokenPathids at dst; these vroutes were previously broken but now patched by the new temporary route
 *     // VlrIntPathidVec brokenPathids2;  // src should send repairLinkReq to dst, src is nexthop in brokenPathids at dst
 *     VlrPathID tempPathid;
 *     VlrIntVidVec linkTrace;
 *     // unsigned int hopcount;      // for statistics
 * }
 * </pre>
 */
class RepairLinkReplyInt : public ::omnetvlr::VlrIntSetupPacket
{
  protected:
    unsigned int src = 0;
    VlrIntVidVec brokenPathids;
    VlrPathID tempPathid;
    VlrIntVidVec linkTrace;

  private:
    void copy(const RepairLinkReplyInt& other);

  protected:
    bool operator==(const RepairLinkReplyInt&) = delete;

  public:
    RepairLinkReplyInt(const char *name=nullptr);
    RepairLinkReplyInt(const RepairLinkReplyInt& other);
    virtual ~RepairLinkReplyInt();
    RepairLinkReplyInt& operator=(const RepairLinkReplyInt& other);
    virtual RepairLinkReplyInt *dup() const override {return new RepairLinkReplyInt(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual unsigned int getSrc() const;
    virtual void setSrc(unsigned int src);

    virtual const VlrIntVidVec& getBrokenPathids() const;
    virtual VlrIntVidVec& getBrokenPathidsForUpdate() { return const_cast<VlrIntVidVec&>(const_cast<RepairLinkReplyInt*>(this)->getBrokenPathids());}
    virtual void setBrokenPathids(const VlrIntVidVec& brokenPathids);

    virtual const VlrPathID& getTempPathid() const;
    virtual VlrPathID& getTempPathidForUpdate() { return const_cast<VlrPathID&>(const_cast<RepairLinkReplyInt*>(this)->getTempPathid());}
    virtual void setTempPathid(const VlrPathID& tempPathid);

    virtual const VlrIntVidVec& getLinkTrace() const;
    virtual VlrIntVidVec& getLinkTraceForUpdate() { return const_cast<VlrIntVidVec&>(const_cast<RepairLinkReplyInt*>(this)->getLinkTrace());}
    virtual void setLinkTrace(const VlrIntVidVec& linkTrace);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RepairLinkReplyInt& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RepairLinkReplyInt& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>routing/vlr/Vlr.msg:262</tt> by opp_msgtool.
 * <pre>
 * //
 * // repairLinkFail that uses unsigned int for vid
 * //
 * class RepairLinkFailInt extends VlrIntSetupPacket
 * {
 *     unsigned int dst;
 *     unsigned int src;
 *     VlrIntVidVec brokenPathids;		// avoid redefinition of std::vector<unsigned int>
 *     // VlrIntPathidVec brokenPathids;  // dst sent repairLinkReply to src, src is nexthop in brokenPathids at dst; these vroutes were not repaired at src by the new temporary route
 *     VlrPathID tempPathid;
 * }
 * </pre>
 */
class RepairLinkFailInt : public ::omnetvlr::VlrIntSetupPacket
{
  protected:
    unsigned int dst = 0;
    unsigned int src = 0;
    VlrIntVidVec brokenPathids;
    VlrPathID tempPathid;

  private:
    void copy(const RepairLinkFailInt& other);

  protected:
    bool operator==(const RepairLinkFailInt&) = delete;

  public:
    RepairLinkFailInt(const char *name=nullptr);
    RepairLinkFailInt(const RepairLinkFailInt& other);
    virtual ~RepairLinkFailInt();
    RepairLinkFailInt& operator=(const RepairLinkFailInt& other);
    virtual RepairLinkFailInt *dup() const override {return new RepairLinkFailInt(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual unsigned int getDst() const;
    virtual void setDst(unsigned int dst);

    virtual unsigned int getSrc() const;
    virtual void setSrc(unsigned int src);

    virtual const VlrIntVidVec& getBrokenPathids() const;
    virtual VlrIntVidVec& getBrokenPathidsForUpdate() { return const_cast<VlrIntVidVec&>(const_cast<RepairLinkFailInt*>(this)->getBrokenPathids());}
    virtual void setBrokenPathids(const VlrIntVidVec& brokenPathids);

    virtual const VlrPathID& getTempPathid() const;
    virtual VlrPathID& getTempPathidForUpdate() { return const_cast<VlrPathID&>(const_cast<RepairLinkFailInt*>(this)->getTempPathid());}
    virtual void setTempPathid(const VlrPathID& tempPathid);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RepairLinkFailInt& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RepairLinkFailInt& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>routing/vlr/Vlr.msg:274</tt> by opp_msgtool.
 * <pre>
 * //
 * // repairRoute that uses unsigned int for vid
 * //
 * class RepairRouteInt extends VlrIntSetupPacket
 * {
 *     VlrPathID pathids[];
 *     unsigned int src;      // for statistics
 * }
 * </pre>
 */
class RepairRouteInt : public ::omnetvlr::VlrIntSetupPacket
{
  protected:
    VlrPathID *pathids = nullptr;
    size_t pathids_arraysize = 0;
    unsigned int src = 0;

  private:
    void copy(const RepairRouteInt& other);

  protected:
    bool operator==(const RepairRouteInt&) = delete;

  public:
    RepairRouteInt(const char *name=nullptr);
    RepairRouteInt(const RepairRouteInt& other);
    virtual ~RepairRouteInt();
    RepairRouteInt& operator=(const RepairRouteInt& other);
    virtual RepairRouteInt *dup() const override {return new RepairRouteInt(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual void setPathidsArraySize(size_t size);
    virtual size_t getPathidsArraySize() const;
    virtual const VlrPathID& getPathids(size_t k) const;
    virtual VlrPathID& getPathidsForUpdate(size_t k) { return const_cast<VlrPathID&>(const_cast<RepairRouteInt*>(this)->getPathids(k));}
    virtual void setPathids(size_t k, const VlrPathID& pathids);
    virtual void insertPathids(size_t k, const VlrPathID& pathids);
    [[deprecated]] void insertPathids(const VlrPathID& pathids) {appendPathids(pathids);}
    virtual void appendPathids(const VlrPathID& pathids);
    virtual void erasePathids(size_t k);

    virtual unsigned int getSrc() const;
    virtual void setSrc(unsigned int src);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RepairRouteInt& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RepairRouteInt& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>routing/vlr/Vlr.msg:282</tt> by opp_msgtool.
 * <pre>
 * //
 * // notify other of my vset, uses unsigned int for vid
 * //
 * class NotifyVsetInt extends VlrIntSetupPacket
 * {
 *     unsigned int dst;
 *     unsigned int src;
 *     unsigned int proxy;
 *     bool toVnei;
 *     VlrIntVidVec trace;         // if specified, not using greedy routing
 * }
 * </pre>
 */
class NotifyVsetInt : public ::omnetvlr::VlrIntSetupPacket
{
  protected:
    unsigned int dst = 0;
    unsigned int src = 0;
    unsigned int proxy = 0;
    bool toVnei = false;
    VlrIntVidVec trace;

  private:
    void copy(const NotifyVsetInt& other);

  protected:
    bool operator==(const NotifyVsetInt&) = delete;

  public:
    NotifyVsetInt(const char *name=nullptr);
    NotifyVsetInt(const NotifyVsetInt& other);
    virtual ~NotifyVsetInt();
    NotifyVsetInt& operator=(const NotifyVsetInt& other);
    virtual NotifyVsetInt *dup() const override {return new NotifyVsetInt(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual unsigned int getDst() const;
    virtual void setDst(unsigned int dst);

    virtual unsigned int getSrc() const;
    virtual void setSrc(unsigned int src);

    virtual unsigned int getProxy() const;
    virtual void setProxy(unsigned int proxy);

    virtual bool getToVnei() const;
    virtual void setToVnei(bool toVnei);

    virtual const VlrIntVidVec& getTrace() const;
    virtual VlrIntVidVec& getTraceForUpdate() { return const_cast<VlrIntVidVec&>(const_cast<NotifyVsetInt*>(this)->getTrace());}
    virtual void setTrace(const VlrIntVidVec& trace);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NotifyVsetInt& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NotifyVsetInt& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>routing/vlr/Vlr.msg:293</tt> by opp_msgtool.
 * <pre>
 * //
 * // repairLocalReq with trace that uses unsigned int for vid
 * //
 * packet RepairLocalReqFloodInt
 * {
 *     VlrIntVidToPathidSetMap dstToPathidsMap;
 *     VlrIntVidSet brokenPathids;     // avoid redefinition of std::set<unsigned int>
 *     // VlrIntPathidSet brokenPathids;  // dst is prevhop (or one of prevhopVids) in brokenPathids at src; nodes in linkTrace don't contain these brokenPathids
 *     unsigned int ttl;
 *     unsigned int floodSeqnum;    // for statistics
 *     VlrIntVidVec linkTrace;
 *     // L3Address srcAddress;
 * }
 * </pre>
 */
class RepairLocalReqFloodInt : public ::omnetpp::cPacket
{
  protected:
    VlrIntVidToPathidSetMap dstToPathidsMap;
    VlrIntVidSet brokenPathids;
    unsigned int ttl = 0;
    unsigned int floodSeqnum = 0;
    VlrIntVidVec linkTrace;

  private:
    void copy(const RepairLocalReqFloodInt& other);

  protected:
    bool operator==(const RepairLocalReqFloodInt&) = delete;

  public:
    RepairLocalReqFloodInt(const char *name=nullptr, short kind=0);
    RepairLocalReqFloodInt(const RepairLocalReqFloodInt& other);
    virtual ~RepairLocalReqFloodInt();
    RepairLocalReqFloodInt& operator=(const RepairLocalReqFloodInt& other);
    virtual RepairLocalReqFloodInt *dup() const override {return new RepairLocalReqFloodInt(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const VlrIntVidToPathidSetMap& getDstToPathidsMap() const;
    virtual VlrIntVidToPathidSetMap& getDstToPathidsMapForUpdate() { return const_cast<VlrIntVidToPathidSetMap&>(const_cast<RepairLocalReqFloodInt*>(this)->getDstToPathidsMap());}
    virtual void setDstToPathidsMap(const VlrIntVidToPathidSetMap& dstToPathidsMap);

    virtual const VlrIntVidSet& getBrokenPathids() const;
    virtual VlrIntVidSet& getBrokenPathidsForUpdate() { return const_cast<VlrIntVidSet&>(const_cast<RepairLocalReqFloodInt*>(this)->getBrokenPathids());}
    virtual void setBrokenPathids(const VlrIntVidSet& brokenPathids);

    virtual unsigned int getTtl() const;
    virtual void setTtl(unsigned int ttl);

    virtual unsigned int getFloodSeqnum() const;
    virtual void setFloodSeqnum(unsigned int floodSeqnum);

    virtual const VlrIntVidVec& getLinkTrace() const;
    virtual VlrIntVidVec& getLinkTraceForUpdate() { return const_cast<VlrIntVidVec&>(const_cast<RepairLocalReqFloodInt*>(this)->getLinkTrace());}
    virtual void setLinkTrace(const VlrIntVidVec& linkTrace);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RepairLocalReqFloodInt& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RepairLocalReqFloodInt& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>routing/vlr/Vlr.msg:306</tt> by opp_msgtool.
 * <pre>
 * //
 * // repairLocalReply with trace that uses unsigned int for vid
 * //
 * class RepairLocalReplyInt extends VlrIntSetupPacket
 * {
 *     unsigned int src;           // for statistics
 *     // L3Address srcAddress;
 *     // VlrIntVidVec brokenPathids;		// avoid redefinition of std::vector<unsigned int>
 *     // VlrIntPathidVec brokenPathids;  // dst sent repairLocalReq to src, src is prevhop (or one of prevhopVids) in brokenPathids at dst; these vroutes were previously broken but now ready to be repaired with linkTrace
 *     VlrIntPathidToVidVecMap pathidToPrevhopMap;     // map pathid in brokenPathids to [fromVid, toVid, prevhopVids] at src
 *     VlrIntVidVec linkTrace;
 *     VlrIntVidVec prevhopVids;
 *     unsigned int oldestPrevhopIndex;
 *     // unsigned int hopcount;      // for statistics
 * }
 * </pre>
 */
class RepairLocalReplyInt : public ::omnetvlr::VlrIntSetupPacket
{
  protected:
    unsigned int src = 0;
    VlrIntPathidToVidVecMap pathidToPrevhopMap;
    VlrIntVidVec linkTrace;
    VlrIntVidVec prevhopVids;
    unsigned int oldestPrevhopIndex = 0;

  private:
    void copy(const RepairLocalReplyInt& other);

  protected:
    bool operator==(const RepairLocalReplyInt&) = delete;

  public:
    RepairLocalReplyInt(const char *name=nullptr);
    RepairLocalReplyInt(const RepairLocalReplyInt& other);
    virtual ~RepairLocalReplyInt();
    RepairLocalReplyInt& operator=(const RepairLocalReplyInt& other);
    virtual RepairLocalReplyInt *dup() const override {return new RepairLocalReplyInt(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual unsigned int getSrc() const;
    virtual void setSrc(unsigned int src);

    virtual const VlrIntPathidToVidVecMap& getPathidToPrevhopMap() const;
    virtual VlrIntPathidToVidVecMap& getPathidToPrevhopMapForUpdate() { return const_cast<VlrIntPathidToVidVecMap&>(const_cast<RepairLocalReplyInt*>(this)->getPathidToPrevhopMap());}
    virtual void setPathidToPrevhopMap(const VlrIntPathidToVidVecMap& pathidToPrevhopMap);

    virtual const VlrIntVidVec& getLinkTrace() const;
    virtual VlrIntVidVec& getLinkTraceForUpdate() { return const_cast<VlrIntVidVec&>(const_cast<RepairLocalReplyInt*>(this)->getLinkTrace());}
    virtual void setLinkTrace(const VlrIntVidVec& linkTrace);

    virtual const VlrIntVidVec& getPrevhopVids() const;
    virtual VlrIntVidVec& getPrevhopVidsForUpdate() { return const_cast<VlrIntVidVec&>(const_cast<RepairLocalReplyInt*>(this)->getPrevhopVids());}
    virtual void setPrevhopVids(const VlrIntVidVec& prevhopVids);

    virtual unsigned int getOldestPrevhopIndex() const;
    virtual void setOldestPrevhopIndex(unsigned int oldestPrevhopIndex);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RepairLocalReplyInt& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RepairLocalReplyInt& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>routing/vlr/Vlr.msg:322</tt> by opp_msgtool.
 * <pre>
 * //
 * // repairLocalPrev that uses unsigned int for vid
 * //
 * class RepairLocalPrevInt extends VlrIntSetupPacket
 * {
 *     VlrIntPathidToVidVecMap pathidToPrevhopMap;     // map pathid in brokenPathids to [prevhop, prev of prevhop, ..]
 *     unsigned int src;      // for statistics
 * }
 * </pre>
 */
class RepairLocalPrevInt : public ::omnetvlr::VlrIntSetupPacket
{
  protected:
    VlrIntPathidToVidVecMap pathidToPrevhopMap;
    unsigned int src = 0;

  private:
    void copy(const RepairLocalPrevInt& other);

  protected:
    bool operator==(const RepairLocalPrevInt&) = delete;

  public:
    RepairLocalPrevInt(const char *name=nullptr);
    RepairLocalPrevInt(const RepairLocalPrevInt& other);
    virtual ~RepairLocalPrevInt();
    RepairLocalPrevInt& operator=(const RepairLocalPrevInt& other);
    virtual RepairLocalPrevInt *dup() const override {return new RepairLocalPrevInt(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const VlrIntPathidToVidVecMap& getPathidToPrevhopMap() const;
    virtual VlrIntPathidToVidVecMap& getPathidToPrevhopMapForUpdate() { return const_cast<VlrIntPathidToVidVecMap&>(const_cast<RepairLocalPrevInt*>(this)->getPathidToPrevhopMap());}
    virtual void setPathidToPrevhopMap(const VlrIntPathidToVidVecMap& pathidToPrevhopMap);

    virtual unsigned int getSrc() const;
    virtual void setSrc(unsigned int src);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RepairLocalPrevInt& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RepairLocalPrevInt& obj) {obj.parsimUnpack(b);}


}  // namespace omnetvlr


namespace omnetpp {

inline any_ptr toAnyPtr(const omnetvlr::VlrPathID *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline omnetvlr::VlrPathID *fromAnyPtr(any_ptr ptr) { return ptr.get<omnetvlr::VlrPathID>(); }
inline any_ptr toAnyPtr(const omnetvlr::VlrIntVidSet *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline omnetvlr::VlrIntVidSet *fromAnyPtr(any_ptr ptr) { return ptr.get<omnetvlr::VlrIntVidSet>(); }
inline any_ptr toAnyPtr(const omnetvlr::VlrIntVidVec *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline omnetvlr::VlrIntVidVec *fromAnyPtr(any_ptr ptr) { return ptr.get<omnetvlr::VlrIntVidVec>(); }
inline any_ptr toAnyPtr(const omnetvlr::VlrIntVidToPathidSetMap *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline omnetvlr::VlrIntVidToPathidSetMap *fromAnyPtr(any_ptr ptr) { return ptr.get<omnetvlr::VlrIntVidToPathidSetMap>(); }
inline any_ptr toAnyPtr(const omnetvlr::VlrIntPathidToVidVecMap *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline omnetvlr::VlrIntPathidToVidVecMap *fromAnyPtr(any_ptr ptr) { return ptr.get<omnetvlr::VlrIntPathidToVidVecMap>(); }
inline any_ptr toAnyPtr(const omnetvlr::VlrIntRepState *p) {return any_ptr(p);}
template<> inline omnetvlr::VlrIntRepState *fromAnyPtr(any_ptr ptr) { return ptr.get<omnetvlr::VlrIntRepState>(); }
template<> inline omnetvlr::WaitSetupReqIntTimer *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetvlr::WaitSetupReqIntTimer*>(ptr.get<cObject>()); }
template<> inline omnetvlr::FailedPacketDelayTimer *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetvlr::FailedPacketDelayTimer*>(ptr.get<cObject>()); }
template<> inline omnetvlr::WaitRepairLinkIntTimer *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetvlr::WaitRepairLinkIntTimer*>(ptr.get<cObject>()); }
template<> inline omnetvlr::VlrIntBeacon *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetvlr::VlrIntBeacon*>(ptr.get<cObject>()); }
template<> inline omnetvlr::NotifyLinkFailureInt *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetvlr::NotifyLinkFailureInt*>(ptr.get<cObject>()); }
inline any_ptr toAnyPtr(const omnetvlr::VlrIntOption *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline omnetvlr::VlrIntOption *fromAnyPtr(any_ptr ptr) { return ptr.get<omnetvlr::VlrIntOption>(); }
template<> inline omnetvlr::VlrIntUniPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetvlr::VlrIntUniPacket*>(ptr.get<cObject>()); }
template<> inline omnetvlr::VlrIntSetupPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetvlr::VlrIntSetupPacket*>(ptr.get<cObject>()); }
template<> inline omnetvlr::SetupReqInt *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetvlr::SetupReqInt*>(ptr.get<cObject>()); }
template<> inline omnetvlr::SetupReplyInt *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetvlr::SetupReplyInt*>(ptr.get<cObject>()); }
template<> inline omnetvlr::SetupFailInt *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetvlr::SetupFailInt*>(ptr.get<cObject>()); }
template<> inline omnetvlr::AddRouteInt *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetvlr::AddRouteInt*>(ptr.get<cObject>()); }
template<> inline omnetvlr::TeardownInt *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetvlr::TeardownInt*>(ptr.get<cObject>()); }
template<> inline omnetvlr::DismantleInt *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetvlr::DismantleInt*>(ptr.get<cObject>()); }
template<> inline omnetvlr::VlrIntTestPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetvlr::VlrIntTestPacket*>(ptr.get<cObject>()); }
template<> inline omnetvlr::RepairLinkReqFloodInt *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetvlr::RepairLinkReqFloodInt*>(ptr.get<cObject>()); }
template<> inline omnetvlr::RepairLinkReplyInt *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetvlr::RepairLinkReplyInt*>(ptr.get<cObject>()); }
template<> inline omnetvlr::RepairLinkFailInt *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetvlr::RepairLinkFailInt*>(ptr.get<cObject>()); }
template<> inline omnetvlr::RepairRouteInt *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetvlr::RepairRouteInt*>(ptr.get<cObject>()); }
template<> inline omnetvlr::NotifyVsetInt *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetvlr::NotifyVsetInt*>(ptr.get<cObject>()); }
template<> inline omnetvlr::RepairLocalReqFloodInt *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetvlr::RepairLocalReqFloodInt*>(ptr.get<cObject>()); }
template<> inline omnetvlr::RepairLocalReplyInt *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetvlr::RepairLocalReplyInt*>(ptr.get<cObject>()); }
template<> inline omnetvlr::RepairLocalPrevInt *fromAnyPtr(any_ptr ptr) { return check_and_cast<omnetvlr::RepairLocalPrevInt*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __OMNETVLR_VLR_M_H

